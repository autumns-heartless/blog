import{bQ as t,aM as i,w as c,L as a,x as n,J as o,I as r,aZ as e}from"./chunks/framework.DhTiqy6F.js";const k=JSON.parse('{"title":"ssh2-sftp-client","description":"","frontmatter":{"author":"摸鱼的春哥","reprinted":true,"title":"ssh2-sftp-client","date":"2020/10/02 21:29","categories":["打包部署"],"tags":["打包部署"]},"headers":[],"relativePath":"other/deploy/ssh2-sftp-client.md","filePath":"other/deploy/ssh2-sftp-client.md","lastUpdated":1726822854000}'),d={name:"other/deploy/ssh2-sftp-client.md"};function u(b,s,h,m,g,v){const p=e("BackTop"),l=e("ArticleMetadata");return i(),c("div",{"data-pagefind-body":!0},[a(p),s[0]||(s[0]=n("h1",{id:"ssh2-sftp-client",tabindex:"-1"},[o("ssh2-sftp-client "),n("a",{class:"header-anchor",href:"#ssh2-sftp-client","aria-label":'Permalink to "ssh2-sftp-client"'},"​")],-1)),a(l,{article:{}}),s[1]||(s[1]=r(`<blockquote><p>你还在用 xftp 部署你的项目和个人博客？那耗费的时间和手速用来摸鱼它不香吗？我的同事曹 mou 斌用他神秘的微笑告诉我，真的很香。</p></blockquote><h2 id="一、他的手法熟练到让人心疼" tabindex="-1">一、他的手法熟练到让人心疼 <a class="header-anchor" href="#一、他的手法熟练到让人心疼" aria-label="Permalink to &quot;一、他的手法熟练到让人心疼&quot;">​</a></h2><p>曹 mou 斌是个博客爱好者，他几乎每周都要更新好几篇博客。</p><p>他娴熟地掌握着更新自己博客的<code>一条龙</code>手法：</p><ul><li>npm run build</li><li>打开 <code>xftp</code> 软件</li><li>进入相应的目录</li><li>删除现存的 <code>html</code> 目录</li><li>把打包出来的 <code>dist</code>重命名为 \`html</li><li>在 <code>xftp</code> 上传新打包的目录</li></ul><p>有这手速，干点啥不好，非得在这点鼠标？</p><blockquote><p>曹 mou 斌的女朋友听了连连点头。</p></blockquote><p>为了曹 mou 斌的幸福，我给他推荐了 ~XX 肾宝 (误)~ <code>&quot;ssh2-sftp-client&quot;</code>。</p><h2 id="二、ssh2-sftp-client-是什么" tabindex="-1">二、ssh2-sftp-client 是什么？ <a class="header-anchor" href="#二、ssh2-sftp-client-是什么" aria-label="Permalink to &quot;二、ssh2-sftp-client 是什么？&quot;">​</a></h2><p>顾名思义，ssh2-sftp-client 是一款：</p><p><strong>为<code>node.js</code>基于<code>ssh2</code>封装的，<code>SFTP客户端</code></strong>。 三个关键词：</p><ol><li><strong>node.js</strong>：OK，这是目前几乎所有前端都会用到的一门语言，你也不例外。</li><li><strong>ssh2</strong>: 这里的 ssh2 不是指协议，而是指一个 <code>node.js</code> 为 <code>ssh2 client</code>（ssh2 客户端）的实现; <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmscdex%2Fssh2" title="https://github.com/mscdex/ssh2" target="_blank" rel="noreferrer">github/ssh2</a></li><li><strong>SFTP 客户端</strong>: SSH File Transfer Protocol 的缩写，安全文件传送协议</li></ol><p>简单来说： <code>ssh2-sftp-client</code> 基于 <code>ssh2</code> 库进行了封装，让 <code>文件传输</code> 相关的方法变得更为简洁，还支持了 <code>Promise</code> 。</p><p>这就是为什么我推荐 <code>ssh2-sftp-client</code>，而不是直接使用 <code>ssh2</code>，因为它在文件传输这件事上——<strong>对开发者而言，更友好！</strong></p><h2 id="三、怎么用" tabindex="-1">三、怎么用？ <a class="header-anchor" href="#三、怎么用" aria-label="Permalink to &quot;三、怎么用？&quot;">​</a></h2><blockquote><p>就像你用 <code>xftp</code> 客户端那样用。真的，一模一样，不信往下看....</p></blockquote><h3 id="_1-安装依赖" tabindex="-1">1. 安装依赖 <a class="header-anchor" href="#_1-安装依赖" aria-label="Permalink to &quot;1. 安装依赖&quot;">​</a></h3><blockquote><p>就像你下载 .exe 安装包那样</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm install ssh2-sftp-client -dev</span></span>
<span class="line"><span># or</span></span>
<span class="line"><span>yarn add ssh2-sftp-client -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-先打开客户端" tabindex="-1">2. 先打开客户端 <a class="header-anchor" href="#_2-先打开客户端" aria-label="Permalink to &quot;2. 先打开客户端&quot;">​</a></h3><blockquote><p>就想你双击快捷方式那样</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let Client = require(&#39;ssh2-sftp-client&#39;);</span></span>
<span class="line"><span>let sftp = new Client();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-新建一个-ftp-链接" tabindex="-1">3. 新建一个 ftp 链接 <a class="header-anchor" href="#_3-新建一个-ftp-链接" aria-label="Permalink to &quot;3. 新建一个 ftp 链接&quot;">​</a></h3><blockquote><p>就像你在 <code>xftp</code> 客户端里新建链接那样。你需要输入<code>远程host</code>，<code>端口</code>，<code>用户名</code>,<code>密码</code>。</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>await sftp.connect({</span></span>
<span class="line"><span>  host: &#39;nn.nnn.nn.n&#39;,</span></span>
<span class="line"><span>  port: &#39;22&#39;,</span></span>
<span class="line"><span>  username: &#39;root&#39;,</span></span>
<span class="line"><span>  password: &#39;******&#39;</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_4-删掉老的目录" tabindex="-1">4. 删掉老的目录 <a class="header-anchor" href="#_4-删掉老的目录" aria-label="Permalink to &quot;4. 删掉老的目录&quot;">​</a></h3><blockquote><p>就像你在可视化页面找到目录，进行删除那样。</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 先看那个目录存不存在</span></span>
<span class="line"><span>if (await client.exists(remotePath)) {</span></span>
<span class="line"><span>  // 存在的话��👴删掉</span></span>
<span class="line"><span>  await client.rmdir(remotePath, true)</span></span>
<span class="line"><span>  console.log(&#39;删除成功&#39;)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_5-把博客-网站-复制粘贴上去" tabindex="-1">5. 把<code>博客/网站</code> 复制粘贴上去 <a class="header-anchor" href="#_5-把博客-网站-复制粘贴上去" aria-label="Permalink to &quot;5. 把\`博客/网站\` 复制粘贴上去&quot;">​</a></h3><blockquote><p>就和你的复制粘贴一模一样（<code>不，比那还容易</code>）</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let rslt = await client.uploadDir(localPath, remotePath);</span></span>
<span class="line"><span>console.log(&#39;上传成功&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_6-脚本写完啦-执行它吧" tabindex="-1">6. 脚本写完啦~执行它吧~ <a class="header-anchor" href="#_6-脚本写完啦-执行它吧" aria-label="Permalink to &quot;6. 脚本写完啦~执行它吧~&quot;">​</a></h3><p>在 package.json 的 scripts 标签中加入一条：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;deploy&quot;: &quot;vue-cli-service build &amp;&amp; node ./scripts/deploy.js&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样，在你执行完 <code>npm run deploy</code> 之后，你的构建产物就能 <code>嗖</code> 地一声传到远程服务器的目标路径啦~</p><h2 id="四、-如果你的代码是要提交-git-的-别忘了这步" tabindex="-1">四、 如果你的代码是要提交 git 的，别忘了这步 <a class="header-anchor" href="#四、-如果你的代码是要提交-git-的-别忘了这步" aria-label="Permalink to &quot;四、 如果你的代码是要提交 git 的，别忘了这步&quot;">​</a></h2><blockquote><p>任何时候，把你的账号密码 <code>git commit</code> 都是一件危险的事情。</p></blockquote><p>所以，在 <code>项目根目录</code> 下创建 <code>.auth/ftp.json</code> 文件，并把它加入 <code>.gitignore</code>:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.auth</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，<code>ftp.json</code> 用来存储你的敏感信息：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;host&quot;: &quot;139.9.1xx.xxx&quot;,</span></span>
<span class="line"><span>  &quot;port&quot;: 22,</span></span>
<span class="line"><span>  &quot;user&quot;: &quot;root&quot;,</span></span>
<span class="line"><span>  &quot;password&quot;: &quot;**********&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后，在你的脚本文件 <code>scripts/deploy.js</code> 中引入 <code>json</code>，而不是 <code>硬编码</code> 的方式记录 <code>账号密码ip</code>。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const config = require(&#39;../.auth/ftp.json&#39;)</span></span>
<span class="line"><span>await sftp.connect(config) // 很重要！万事安全第一！</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="五、把我的源码送给你吧" tabindex="-1">五、把我的源码送给你吧 <a class="header-anchor" href="#五、把我的源码送给你吧" aria-label="Permalink to &quot;五、把我的源码送给你吧&quot;">​</a></h2><p>接码： <code>scripts/deploy.js</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let Client = require(&#39;ssh2-sftp-client&#39;);</span></span>
<span class="line"><span>let path = require(&#39;path&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let client = new Client();</span></span>
<span class="line"><span>const config = require(&#39;../.auth/ftp.json&#39;);</span></span>
<span class="line"><span>const localPath = path.resolve(__dirname, &#39;../dist&#39;);</span></span>
<span class="line"><span>const remotePath = &#39;/usr/local/dwxcb/rc/dist&#39;;</span></span>
<span class="line"><span>const main = async () =&gt; {</span></span>
<span class="line"><span>  try {</span></span>
<span class="line"><span>    await client.connect(config);</span></span>
<span class="line"><span>    if (await client.exists(remotePath)) {</span></span>
<span class="line"><span>      await client.rmdir(remotePath, true);</span></span>
<span class="line"><span>      console.log(&#39;删除成功&#39;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    let result = await client.uploadDir(localPath, remotePath);</span></span>
<span class="line"><span>    console.log(&#39;上传成功&#39;);</span></span>
<span class="line"><span>    return result;</span></span>
<span class="line"><span>  } finally {</span></span>
<span class="line"><span>    client.end();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>main();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,46))])}const q=t(d,[["render",u]]);export{k as __pageData,q as default};
